param (
    [string]$Path = "empty",
    [string]$Op = "get"
)

#############################################################################
#  If Powershell is running the 32-bit version on a 64-bit machine, we
#           need to force powershell to run in 64-bit mode .
#############################################################################
if ($env:PROCESSOR_ARCHITEW6432 -eq "AMD64") {
    # write-warning "Not running in 64bits, relaunching script in 64 bit mode"
    if ($myInvocation.Line) {
        &"$env:WINDIR\sysnative\windowspowershell\v1.0\powershell.exe" -NonInteractive -NoProfile $myInvocation.Line -Path $Path -Op $Op
    }else{
        &"$env:WINDIR\sysnative\windowspowershell\v1.0\powershell.exe" -NonInteractive -NoProfile -file "$($myInvocation.InvocationName)" -Path $Path -Op $Op
    }
exit $lastexitcode
}

$VerbosePreference = "continue"
$ErrorActionPreference = "Stop"

function ExportLayout {
    Try {
        $ParentDir = Split-Path -Parent $Path
        if ($ParentDir -And (Test-Path $ParentDir)) {
            Export-StartLayout -Path $Path -ErrorAction Stop
            $error = "Success"
            $msg = """"
        } else {
            $error = "Error"
            $msg = "Invalid 'Path' parameter"
        }
    } Catch {
        $error = "Error"
        $msg = $_.Exception.Message
    }

    $error
    $msg
}
function ImportLayout {
    Try {
        $ParentDir = Split-Path -Parent $Path
        if ($ParentDir -And (Test-Path $ParentDir)) {
            Import-StartLayout -LayoutPath $Path -ErrorAction Stop
            $error = "Success"
            $msg = """"
        } else {
            $error = "Error"
            $msg = "Invalid 'Path' parameter"
        }
    } Catch {
        $error = "Error"
        $msg = $_.Exception.Message
    }

    $error
    $msg
}

if ($Op -eq "get") {
    $return = ExportLayout
} else {
    $return = ImportLayout
}

$return[0]
$return[1]
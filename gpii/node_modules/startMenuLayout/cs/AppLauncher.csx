using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;

[ComImport, Guid("45BA127D-10A8-46EA-8AB7-56EA9078943C")]
class ApplicationActivationManager { }

/// <summary>
/// One or more of the following flags used to support design mode, debugging, and testing scenarios.
/// </summary>
enum ActivateOptions {
    /// <summary> No flags are set. /// </summary>
    None = 0x00000000,
    /// <summary> The app is being activated for design mode, so it can't create its normal window. /// </summary>
    DesignMode = 0x00000001,
    /// <summary> Do not display an error dialog if the app fails to activate. /// </summary>
    NoErrorUI = 0x00000002,
    /// <summary> Do not display the app's splash screen when the app is activated. /// </summary>
    NoSplashScreen = 0x00000004
}

/// <summary>
/// Provides methods which activate Windows Store apps for the Launch, File, and Protocol extensions.
/// You will normally use this interface in debuggers and design tools.
///
/// href: https://docs.microsoft.com/en-us/windows/desktop/api/shobjidl_core/nn-shobjidl_core-iapplicationactivationmanager
/// </summary>
[ComImport, InterfaceType(ComInterfaceType.InterfaceIsIUnknown), Guid("2e941141-7f97-4756-ba1d-9decde894a3d")]
interface IApplicationActivationManager {
    int ActivateApplication([MarshalAs(UnmanagedType.LPWStr)] string appUserModelId, [MarshalAs(UnmanagedType.LPWStr)] string arguments,
        ActivateOptions options, out uint processId);
    int ActivateForFile([MarshalAs(UnmanagedType.LPWStr)] string appUserModelId, IntPtr pShelItemArray,
        [MarshalAs(UnmanagedType.LPWStr)] string verb, out uint processId);
    int ActivateForProtocol([MarshalAs(UnmanagedType.LPWStr)] string appUserModelId, IntPtr pShelItemArray,
        [MarshalAs(UnmanagedType.LPWStr)] string verb, out uint processId);
}

/// <summary>
/// Entry class for edge.js.
/// </summary>
public class Startup {
    [DllImport("kernel32")]
    static extern int OpenPackageInfoByFullName([MarshalAs(UnmanagedType.LPWStr)] string fullName, uint reserved, out IntPtr packageInfo);

    [DllImport("kernel32")]
    static extern int GetPackageApplicationIds(IntPtr pir, ref int bufferLength, byte[] buffer, out int count);

    [DllImport("kernel32")]
    static extern int ClosePackageInfo(IntPtr pir);

    /// <summary>
    /// Launch a particular Windows 10 package using it's full name and the provided arguments for the activation.
    /// </summary>
    /// <param name="packageFullName">The full package name that identifies the application to be launched..</param>
    /// <param name="arguments">The arguments to pass to the application.</param>
    /// <returns></returns>
    public static uint LaunchPackage(string packageFullName, string arguments=null) {
        var pir = IntPtr.Zero;
        try {
            int error = OpenPackageInfoByFullName(packageFullName, 0, out pir);
            if(error != 0) {
                throw new Win32Exception(error);
            }

            int length = 0, count;
            GetPackageApplicationIds(pir, ref length, null, out count);

            var buffer = new byte[length];
            error = GetPackageApplicationIds(pir, ref length, buffer, out count);
            if(error != 0) {
                throw new Win32Exception(error);
            }

            var appUserModelId = Encoding.Unicode.GetString(buffer, IntPtr.Size * count, length - IntPtr.Size * count);

            var activation = (IApplicationActivationManager) new ApplicationActivationManager();
            uint pid;
            int hr = activation.ActivateApplication(appUserModelId, arguments ?? string.Empty, ActivateOptions.NoErrorUI, out pid);
            if(hr < 0) {
                Marshal.ThrowExceptionForHR(hr);
            }

            return pid;
        } finally {
            if(pir != IntPtr.Zero) {
                ClosePackageInfo(pir);
            }
        }

        return 0;
    }

    /// <summary>
    /// Entry method called by edge.js.
    /// </summary>
    /// <param name="input">The fullpackage name to be launched.</param>
    /// <returns>The pid of the process being launched or zero in case of error.</returns>
    public async Task<object> Invoke(dynamic input) {
        return LaunchPackage(input);
    }
}
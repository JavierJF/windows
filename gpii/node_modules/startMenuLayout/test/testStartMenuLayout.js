/*
 * Tests for the nativeSettingsHandler
 *
 * Copyright 2018 Raising the Floor - International
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("infusion"),
    fs = require("fs"),
    xm = require("xml-mapping"),
    path = require("path");

var jqUnit = fluid.require("node-jqunit");
var gpii = fluid.registerNamespace("gpii");

fluid.require("%gpii-windows");

require("../src/startMenuLayout.js");

fluid.registerNamespace("gpii.tests.windows.startMenuLayoutHandler");

var teardowns = [];
jqUnit.module("gpii.tests.windows.startMenuLayoutHandler", {
    setup: function () {
    },
    teardown: function () {
        while (teardowns.length) {
            teardowns.pop()();
        }
    }
});

var defaulLayoutPath = path.join(__dirname, "testData/StartMenuLayoutDefault.xml" );
var customLayoutPath = path.join(__dirname, "testData/StartMenuLayoutCustom.xml" );

var defaultLayoutValue = fs.readFileSync(defaulLayoutPath, "utf8");
var customLayoutValue = fs.readFileSync(customLayoutPath, "utf8");

gpii.tests.windows.startMenuLayoutHandler.apiTest = {
    init: {
        "settings": {
            "StartMenuLayout": {
                "value": defaultLayoutValue
            }
        },
        "options": {
            "functionName": "StartMenuLayout"
        }
    },
    set: {
        payload: {
            "com.microsoft.windows.mouseSettings": [{
                "settings": {
                    "StartMenuLayout": {
                        "value": customLayoutValue
                    }
                },
                "options": {
                    "functionName": "StartMenuLayout"
                }
            }]
        },
        expectedResult: {
            "com.microsoft.windows.mouseSettings": [{
                "settings": {
                    "StartMenuLayout": {
                        "oldValue": {
                            "value": undefined
                        },
                        "newValue": {
                            "value": customLayoutValue
                        }
                    }
                }
            }]
        }
    },
    get: {
        payload: {
            "com.microsoft.windows.mouseSettings": [{
                "settings": {
                    "StartMenuLayout": {}
                },
                "options": {
                    "functionName": "StartMenuLayout"
                }
            }]
        },
        expectedResult: {
            "com.microsoft.windows.mouseSettings": [{
                "settings": {
                    "StartMenuLayout": {
                        "value": undefined
                    }
                }
            }]
        }
    }
};

var sortObject = function (object) {
    var sortedObj = {},
        keys = Object.keys(object);

    keys.sort(function(key1, key2){
        key1 = key1.toLowerCase(), key2 = key2.toLowerCase();
        if(key1 < key2) return -1;
        if(key1 > key2) return 1;
        return 0;
    });

    for(var index in keys) {
        var key = keys[index];
        if(typeof object[key] == 'object' && !(object[key] instanceof Array)){
            sortedObj[key] = sortObject(object[key]);
        } else {
            sortedObj[key] = object[key];
        }
    }

    return sortedObj;
};

var findRecurse = function (obj, keyName) {
    var res = fluid.find(obj, function (elem, index) {
        if (index === keyName) {
            return elem;
        } else if (typeof elem !== "object" || elem === null) {
            return undefined;
        } else {
            return findRecurse(elem, keyName);
        }
    });

    return res;
};

var compareStartLayouts = function (sF, sS) {
    var startGroupSF = findRecurse(sF, "start$Group");
    var startGroupSS = findRecurse(sS, "start$Group");

    var compareByProperty = function (prop) {
        return function (a, b) {
            if (a[prop] === undefined && b[prop] !== undefined) {
                return 1;
            } else if (a[prop] !== undefined && b[prop] === undefined) {
                return -1;
            } else if (a[prop] === undefined && b[prop] === undefined) {
                return 0;
            } else if (a[prop] < b[prop]) {
                return -1;
            } else if (a[prop] > b[prop]) {
                return 1;
            } else {
                return 0;
            }
        }
    };

    var sortedGroupSF = startGroupSF.sort(compareByProperty("Name"));
    var sortedGroupSS = startGroupSS.sort(compareByProperty("Name"));

    var sortGroupTiles = function (group) {
        var startTiles = [];
        fluid.each(group, function (groupObj) {
            var startTile = { Name: groupObj.Name, Tiles: [] };

            if (groupObj["start$Tile"] !== undefined) {
                var tiles = groupObj["start$Tile"];
                if (tiles !== undefined && Array.isArray(tiles)) {
                    var sortedTyles = tiles.sort(compareByProperty("AppUserModelID"));
                    startTile.Tiles.push(sortedTyles);
                } else {
                    startTile.Tiles.push(tiles);
                }
            } else if (groupObj["start$DesktopApplicationTile"] !== undefined) {
                var tiles = groupObj["start$DesktopApplicationTile"];
                if (tiles !== undefined && Array.isArray(tiles)) {
                    var sortedTyles = tiles.sort(compareByProperty("DesktopApplicationLinkPath"));
                    startTile.Tiles.push(sortedTyles);
                } else {
                    startTile.Tiles.push(tiles);
                }

            }

            startTiles.push(startTile);
        });
    };

    return JSON.stringify(sortGroupTiles(sortedGroupSS)) === JSON.stringify(sortGroupTiles(sortedGroupSF));
};

// jqUnit.asyncTest("Testing startMenuLayout shell restarting", function () {
//     jqUnit.expect(1);
//
//     var restartShellRecurse = function (it, max) {
//         var pShellStop = gpii.windows.startMenuLayoutHandler.stopStartShellExperience();
//         pShellStop.then(
//             function () {
//                 if (it === max) {
//                     jqUnit.assert("Success!");
//                     jqUnit.start();
//                 } else {
//                     restartShellRecurse(it + 1, max);
//                 }
//             },
//             function (err) {
//                 jqUnit.fail(err.message);
//                 jqUnit.start();
//             }
//         );
//     };
//
//     restartShellRecurse(0, 20);
//
// });

jqUnit.asyncTest("Testing startMenuLayout API (get and set functions)", function () {
    jqUnit.expect(1);

    var trySet = function () {
        // Test set functionality
        var pRes = gpii.windows.startMenuLayoutHandler.set(gpii.tests.windows.startMenuLayoutHandler.apiTest.set.payload);
        // Check results
        pRes.then(
            function (res) {
                var exp = gpii.tests.windows.startMenuLayoutHandler.apiTest.set.expectedResult;
                var expOldVal = exp["com.microsoft.windows.mouseSettings"][0].settings.StartMenuLayout.oldValue.value;
                var expNewVal = exp["com.microsoft.windows.mouseSettings"][0].settings.StartMenuLayout.newValue.value;
                var resOldVal = res["com.microsoft.windows.mouseSettings"][0].settings.StartMenuLayout.oldValue.value;
                var resNewVal = res["com.microsoft.windows.mouseSettings"][0].settings.StartMenuLayout.newValue.value;

                var expectedResult = {
                    "com.microsoft.windows.mouseSettings": [{
                        "settings": {
                            "StartMenuLayout": {
                                "oldValue": {
                                    "value": sortObject(xm.tojson(expOldVal))
                                },
                                "newValue": {
                                    "value": sortObject(xm.tojson(expNewVal))
                                }
                            }
                        }
                    }]
                };

                var actualResult = {
                    "com.microsoft.windows.mouseSettings": [{
                        "settings": {
                            "StartMenuLayout": {
                                "oldValue": {
                                    "value": sortObject(xm.tojson(resOldVal))
                                },
                                "newValue": {
                                    "value": sortObject(xm.tojson(resNewVal))
                                }
                            }
                        }
                    }]
                };

                jqUnit.assertTrue("Checking return payload of set", compareStartLayouts(expectedResult, actualResult));
                jqUnit.start();
            },
            function (err) {
                jqUnit.fail(err.message);
                jqUnit.start();
            }
        );
    }

    var checkGetResults = function () {
        // First we test the get functionality
        var pRes = gpii.windows.startMenuLayoutHandler.get(gpii.tests.windows.startMenuLayoutHandler.apiTest.get.payload);

        // Check results
        pRes.then(
            function (result) {
                fluid.set(
                    gpii.tests.windows.startMenuLayoutHandler.apiTest.set.expectedResult["com.microsoft.windows.mouseSettings"][0],
                    "settings.StartMenuLayout.oldValue.value",
                    result["com.microsoft.windows.mouseSettings"][0].settings.StartMenuLayout.value
                );

                trySet();
            },
            function (err) {
                jqUnit.fail(err.message);
                jqUnit.start();
            }
        );
    };

    checkGetResults();
});
